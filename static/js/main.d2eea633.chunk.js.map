{"version":3,"sources":["reportWebVitals.js","components/Klip-test.js","components/Time-test.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","KlipTest","prepare_auth","a","request_key","prepare","auth","bappName","successLink","failLink","res","err","alert","prepare_sendKlay","sendKLAY","from","to","amount","console","error","prepare_executeContract","executeContract","value","abi","params","process","REACT_APP_PUBLIC_KEY","onClick","req","setTimeout","request","getResult","real_res","JSON","stringify","TimeTest","differ","useState","isDday","setIsDday","minting_day","Date","count","setCount","currentDate","setCurrentDate","selectedDate","savedCallback","useRef","callback","xmlHttp","XMLHttpRequest","open","window","location","href","toString","setRequestHeader","send","getResponseHeader","useEffect","current","timer","setInterval","clearInterval","String","days","Math","floor","hours","minutes","seconds","type","routing","basename","exact","path","element","ReactDOM","render","document","getElementById"],"mappings":"qKAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oDC0ECQ,MA/Ef,WACE,IACMC,EAAY,uCAAI,8BAAAC,EAAA,4DACD,YACG,GACH,GACbC,EAAc,KAJA,SAKAC,UAAQC,KAAK,CAAEC,SAJhB,YAI0BC,YAHvB,GAGoCC,SAFvC,KAHC,cAKZC,EALY,QAMXC,IACHC,MAAM,yBAA2BF,EAAIC,KAC9BD,EAAIN,cACXA,EAAcM,EAAIN,aATJ,kBAWXA,GAXW,2CAAJ,qDAaZS,EAAgB,uCAAG,8BAAAV,EAAA,4DACJ,YACJ,GACF,6CACI,IACK,GACH,GACbC,EAAc,KAPG,SAQHC,UAAQS,SAAS,CAAEP,SAPpB,YAO8BQ,KANlC,GAMwCC,GAL1C,6CAK8CC,OAJ1C,IAIkDT,YAH7C,GAG0DC,SAF7D,KANI,cAQfC,EARe,QASbC,IACJO,QAAQC,MAAM,6BAA+BT,EAAIC,KAC1CD,EAAIN,cACXA,EAAcM,EAAIN,aAZD,kBAcdA,GAdc,4CAAH,qDAgBhBgB,EAAuB,uCAAG,8BAAAjB,EAAA,4DACX,YACJ,GACF,6CACG,IACF,4LACG,QACK,GACH,GACbC,EAAc,KATU,UAUVC,UAAQgB,gBAAgB,CAAEd,SAT3B,YASqCQ,KARzC,GAQ+CC,GAPjD,6CAOqDM,MANlD,IAMyDC,IAL3D,4LAKgEC,OAJ7D,QAIqEhB,YAHhE,GAG6EC,SAFhF,KARW,eAUtBC,EAVsB,QAWpBC,IACNC,MAAM,oCAAsCF,EAAIC,KACvCD,EAAIN,cACbA,EAAcM,EAAIN,aAdQ,kBAgBrBA,GAhBqB,4CAAH,qDAmB7B,OADqBqB,gJAAYC,qBAE/B,gCACI,wBAAQC,QAAO,sBAAE,8BAAAxB,EAAA,sEACGD,IADH,cACT0B,EADS,OAEfhB,MAAM,QAAQgB,GACdC,YAAW,WACTC,kBAAQF,GAAK,kBAAKhB,MAAM,oFACvB,KALY,SAMQmB,oBAAUH,GANlB,OAMTI,EANS,OAOfpB,MAAM,qBAAqBqB,KAAKC,UAAUF,IAP3B,2CAAjB,+BAQmB,uBACnB,wBAAQL,QAAO,sBAAE,8BAAAxB,EAAA,sEACGU,IADH,cACTe,EADS,OAEfhB,MAAMgB,GACNE,kBAAQF,GAAK,kBAAKhB,MAAM,kFACxBiB,YAAW,kBAAI,OAAM,KAJN,SAKGE,oBAAUH,GALb,OAKTlB,EALS,OAMfE,MAAM,0BAA0BqB,KAAKC,UAAUxB,IANhC,4CAAjB,mCAOuB,uBACvB,wBAAQiB,QAAO,sBAAE,8BAAAxB,EAAA,sEACGiB,IADH,cACTQ,EADS,OAEfE,kBAAQF,GAAK,kBAAKhB,MAAM,kFAFT,SAGGmB,oBAAUH,GAHb,OAGTlB,EAHS,OAIfE,MAAM,gCAAgCqB,KAAKC,UAAUxB,IAJtC,2CAAjB,0CAK8B,2B,OCFvByB,MAzEf,WACI,IAmDkBC,EAnDlB,EAA0BC,oBAAS,GAAnC,mBAAKC,EAAL,KAAaC,EAAb,KACIC,EAAc,IAAIC,KAAK,KAAK,GAAG,EAAE,GAAG,GAAG,GACvC,EAAwBJ,mBAAS,IAAII,MAAzC,mBAEA,GAFA,UAEuBJ,mBAAS,MAAhC,mBACA,GADA,UACyBA,mBAAS,OAAlC,mBACA,GADA,UACuBA,mBAAS,OAAhC,mBACA,GADA,UACuBA,mBAAS,OAAhC,mBACA,GADA,UACmCA,mBAAS,IAA5C,mBAiBA,GAjBA,UAiB0BA,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAsCN,mBAAS,IAAII,MAAnD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAwCR,mBAAS,IAAII,MAArD,mBAAOK,EAAP,KACMC,GADN,KACsBC,oBAEhBC,EAAW,WACfN,EAASD,EAAQ,GACjBG,EAtBe,WACb,IAAIK,EAKJ,OAJAA,EAAU,IAAIC,gBACNC,KAAK,MAAOC,OAAOC,SAASC,KAAKC,YAAY,GACrDN,EAAQO,iBAAiB,eAAgB,aACzCP,EAAQQ,KAAK,IACN,IAAIjB,KAAKS,EAAQS,kBAAkB,SAgB7BxB,IAEbI,EADCK,EAAYJ,IA0BnB,OApBEoB,qBAAU,WACRb,EAAcc,QAAUZ,KAG1BW,qBAAU,WACR,IAGME,EAAQC,aAHD,WACXhB,EAAcc,YAEgB,KAChC,OAAO,kBAAIG,cAAcF,MACxB,IAWH,gCACE,+BAAOG,OAAOrB,KAAoB,uBAClC,+BAAOqB,OAAOvB,KAAc,uBAC5B,+BAAOuB,OAAO3B,KAAe,uBAC7B,+BAAO2B,OAAOzB,KAAoB,uBAClC,+BAAOP,KAAKC,WAdIE,EAceI,EAAYI,EAbpC,CACLsB,KAAMC,KAAKC,MAAMhC,EAAM,OACvBiC,MAAMF,KAAKC,MAAOhC,EAAM,KAAuB,IAC/CkC,QAAQH,KAAKC,MAAOhC,EAAS,IAAO,GAAM,IAC1CmC,QAAQJ,KAAKC,MAAOhC,EAAS,IAAQ,SASyB,uBAChE,uBAAOoC,KAAK,mBAAyB,uBACrC,+BAAOP,OAAOnB,KAAqB,2BC7DnC2B,EACJ,cAAC,IAAD,CAAeC,SAAUjD,gBAAzB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,IAAIC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,EAAD,WAKvCC,IAASC,OACPN,EACAO,SAASC,eAAe,SAM1BzF,M","file":"static/js/main.d2eea633.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useCallback } from 'react';\r\nimport { prepare, request, getResult, getCardList } from 'klip-sdk'\r\nfunction KlipTest() {\r\n  let request_key = null\r\n  const prepare_auth  = async () => {\r\n      const bappName = 'Test BApp'\r\n      const successLink = ''\r\n      const failLink = ''\r\n      let request_key = null\r\n      const res = await prepare.auth({ bappName, successLink, failLink }) \r\n      if(res.err){\r\n          alert(\"Auth_Error Occured! : \" + res.err)\r\n      } else if (res.request_key){\r\n          request_key = res.request_key\r\n      }\r\n      return request_key\r\n  }\r\n  const prepare_sendKlay = async () => {\r\n      const bappName = 'Test BApp'\r\n      const from = ''\r\n      const to = '0x75f58bc747972aa0f4fd189c0045510e178b8e2c'\r\n      const amount = '1'\r\n      const successLink = ''\r\n      const failLink = ''\r\n      let request_key = null\r\n      const res = await prepare.sendKLAY({ bappName, from, to, amount, successLink, failLink })\r\n      if (res.err) {\r\n          console.error(\"SendKlay_Error Occured! : \" + res.err)\r\n      } else if (res.request_key){\r\n          request_key = res.request_key\r\n      }\r\n      return request_key\r\n  }\r\n  const prepare_executeContract = async () => {\r\n      const bappName = 'Test BApp'\r\n      const from = ''\r\n      const to = '0x3ac6f8700f2610fc72261d3dc225d8e47748dfae'\r\n      const value = '0'\r\n      const abi = \"{\\\"constant\\\": true,\\\"inputs\\\": [{\\\"name\\\":\\\"_tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"tokenURI\\\",\\\"outputs\\\":[{\\\"name\\\": \\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}\"\r\n      const params = \"[\\\"1\\\"]\"\r\n      const successLink = ''\r\n      const failLink = ''\r\n      let request_key = null\r\n      const res = await prepare.executeContract({ bappName, from, to, value, abi, params, successLink, failLink })\r\n      if (res.err) {\r\n        alert(\"executeContract_Error Occured! : \" + res.err)\r\n      } else if (res.request_key) {\r\n        request_key = res.request_key\r\n      }\r\n      return request_key\r\n  }\r\n  const OwnerAddress = process.env.REACT_APP_PUBLIC_KEY\r\n  return (\r\n    <div>\r\n        <button onClick={async()=>{\r\n          const req = await prepare_auth()\r\n          alert(\"req: \"+req)\r\n          setTimeout(()=>{\r\n            request(req, ()=> alert('모바일 환경에서 실행하세요.'))\r\n          }, 5000)\r\n          const real_res = await getResult(req)\r\n          alert(\"AUTH real result: \"+JSON.stringify(real_res))\r\n        }}>Auth 버튼</button><br/>\r\n        <button onClick={async()=>{\r\n          const req = await prepare_sendKlay()\r\n          alert(req)\r\n          request(req, ()=> alert('모바일 환경에서 실행하세요.'))\r\n          setTimeout(()=>null, 5000)\r\n          const res = await getResult(req)\r\n          alert(\"SEND KLAY real result: \"+JSON.stringify(res))\r\n        }}>SendKlay 버튼</button><br/>\r\n        <button onClick={async()=>{\r\n          const req = await prepare_executeContract()\r\n          request(req, ()=> alert('모바일 환경에서 실행하세요.'))\r\n          const res = await getResult(req)\r\n          alert(\"EXECUTECONTRACT real result: \"+JSON.stringify(res))\r\n        }}>ExecuteContract 버튼</button><br/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default KlipTest;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nfunction TimeTest() {\r\n    let [isDday, setIsDday] = useState(false); //디데이 이후면 true, 이전이면 false\r\n    var minting_day = new Date(2021,12,6,16,35,0); //일단 임의의 값 넣었음,  할때 원하는 달 -1 해야한데영\r\n    var [nowDate, setNowDate] = useState(new Date()); //현재 시간\r\n    \r\n    let [day, changeDay] = useState(\"0\");\r\n    let [hour, changeHour] = useState(\"00\");\r\n    let [min, changeMin] = useState(\"00\");\r\n    let [sec, changeSec] = useState(\"00\");\r\n    let [nftAmount, changeNftAmount] = useState(0);\r\n\r\n    const TimeTest = () => {\r\n        var xmlHttp;\r\n        xmlHttp = new XMLHttpRequest();\r\n        xmlHttp.open('GET', window.location.href.toString(), false);\r\n        xmlHttp.setRequestHeader(\"Content-Type\", \"text/html\");\r\n        xmlHttp.send('');\r\n        return new Date(xmlHttp.getResponseHeader(\"Date\"));\r\n    }\r\n    /*useEffect(() => {\r\n        setNowDate(TimeTest())\r\n        if(nowDate.getTime()>minting_day.getTime()){ //3번시점\r\n            setIsDday(true);\r\n        }\r\n        console.log(nowDate)\r\n    });*/\r\n    const [count, setCount] = useState(0);\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const savedCallback = useRef();\r\n\r\n    const callback = () => {\r\n      setCount(count + 1);\r\n      setCurrentDate(TimeTest());\r\n      if(currentDate>minting_day){\r\n        setIsDday(true);\r\n      } else {\r\n        setIsDday(false);\r\n      }\r\n    }\r\n    useEffect(()=>{\r\n      savedCallback.current = callback;\r\n    })\r\n    \r\n    useEffect(()=>{\r\n      const tick = () => {\r\n        savedCallback.current();\r\n      }\r\n      const timer = setInterval(tick, 1000);\r\n      return ()=>clearInterval(timer)\r\n    }, []);\r\n\r\n    const timeLeft = (differ) => {\r\n      return {\r\n        days: Math.floor(differ / (1000 * 60 * 60 * 24)),\r\n        hours:Math.floor((differ / (1000 * 60 * 60)) % 24),\r\n        minutes:Math.floor((differ / 1000 / 60) % 60),\r\n        seconds:Math.floor((differ / 1000) % 60)\r\n      }\r\n    }\r\n  return (\r\n    <div>\r\n      <span>{String(currentDate)}</span><br/>\r\n      <span>{String(count)}</span><br/>\r\n      <span>{String(isDday)}</span><br/>\r\n      <span>{String(minting_day)}</span><br/>\r\n      <span>{JSON.stringify(timeLeft(minting_day-currentDate))}</span><br/>\r\n      <input type=\"datetime-local\"></input><br/>\r\n      <span>{String(selectedDate)}</span><br/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeTest;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Route, BrowserRouter, Routes } from 'react-router-dom'\nimport KlipTest from './components/Klip-test';\nimport TimeTest from './components/Time-test';\n\nconst routing = (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Routes>\n      <Route exact path=\"/\" element={<KlipTest />}/>\n      <Route path=\"/timeTest\" element={<TimeTest />}/>\n    </Routes>\n  </BrowserRouter>\n);\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}